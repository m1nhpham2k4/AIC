document.addEventListener("DOMContentLoaded", () => {
  const keyframesBtn = document.getElementById("keyframes-btn");
  const container = document.getElementById("keyframes-subfolders");

  if (!keyframesBtn || !container) return;

  keyframesBtn.addEventListener("click", async () => {
    const isExpanded = container.classList.contains("expanded");

    if (isExpanded) {
      container.innerHTML = "";
      container.classList.remove("expanded");
      container.classList.add("collapsed");
      return;
    }

    try {
      const res = await fetch("/api/keyframes-tree");
      const data = await res.json();

      container.innerHTML = "";

      data.keyframes.forEach(group => {
        const parentLi = document.createElement("li");
        parentLi.classList.add("subfolder");

        const folderSpan = document.createElement("span");
        folderSpan.textContent = group.name;
        folderSpan.classList.add("folder-toggle");
        folderSpan.style.cursor = "pointer";

        const subUl = document.createElement("ul");
        subUl.classList.add("sub-subfolders");
        subUl.style.display = "none";

        group.subfolders.forEach(sub => {
          const subLi = document.createElement("li");
          subLi.textContent = sub;
          subLi.classList.add("subfolder-item");
          subLi.style.cursor = "pointer";

          // ‚úÖ Khi click v√†o L01_V001 ‚Üí load ·∫£nh
          subLi.addEventListener("click", () => {
            loadImages(group.name, sub);
          });

          subUl.appendChild(subLi);
        });

        // Toggle hi·ªÉn th·ªã th∆∞ m·ª•c con
        folderSpan.addEventListener("click", () => {
          subUl.style.display = subUl.style.display === "none" ? "block" : "none";
        });

        parentLi.appendChild(folderSpan);
        parentLi.appendChild(subUl);
        container.appendChild(parentLi);
      });

      container.classList.remove("collapsed");
      container.classList.add("expanded");
    } catch (err) {
      console.error("‚ùå L·ªói khi t·∫£i c√¢y th∆∞ m·ª•c:", err);
    }
  });
});

// ‚úÖ H√†m load ·∫£nh t·ª´ th∆∞ m·ª•c
async function loadImages(folder, subfolder) {
  const preview = document.getElementById("preview");
  preview.innerHTML = "<p>üîÑ ƒêang t·∫£i ·∫£nh...</p>";

  try {
    const res = await fetch(`/api/keyframes-images?folder=${folder}&subfolder=${subfolder}`);

    if (!res.ok) {
      throw new Error(`L·ªói t·ª´ server: ${res.status} ${res.statusText}`);
    }

    const data = await res.json();

    preview.innerHTML = "";

    if (data.images.length === 0) {
      preview.innerHTML = "<p>‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o.</p>";
      return;
    }

    data.images.forEach((src) => {
      const img = document.createElement("img");
      img.src = src;
      img.classList.add("thumbnail");
      img.addEventListener("click", () => {
        showImageDetail(src, folder, subfolder);  // üü¢ G·ªçi h√†m khi click
      });
      preview.appendChild(img);
    });
  } catch (err) {
    preview.innerHTML = "<p style='color:red;'>‚ùå L·ªói khi t·∫£i ·∫£nh.</p>";
    console.error("‚ö†Ô∏è L·ªói khi fetch ·∫£nh:", err);
  }
}

async function showImageDetail(imageSrc, folder, subfolder) {
  const detailPanel = document.getElementById("image-detail");
  const previewContainer = detailPanel.querySelector(".large-preview");
  const title = document.getElementById("image-title");
  const length = document.getElementById("image-length");
  const author = document.getElementById("image-author");
  const url = document.getElementById("image-url");

  detailPanel.classList.remove("hidden");

  // üìù Gi·∫£ l·∫≠p metadata
  title.textContent = `Title: ${subfolder}`;
  length.textContent = "Length: ~";
  author.textContent = "Author: Unknown";
  url.href = "#";
  url.textContent = "#";

  // G·ªçi API ki·ªÉm tra c√≥ video kh√¥ng
  try {
    const videoFolder = `Videos_${subfolder.split("_")[0]}`;
    const res = await fetch(`/api/video-info?folder=${videoFolder}&subfolder=${subfolder}`);

    if (!res.ok) throw new Error("Kh√¥ng c√≥ video");

    const data = await res.json();
    const videoUrl = data.video_url;

    previewContainer.innerHTML = `
      <video controls width="100%">
        <source src="${videoUrl}" type="video/mp4" />
        Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ video.
      </video>
    `;
  } catch (err) {
    // ‚ùå Kh√¥ng c√≥ video ‚Üí fallback v·ªÅ ·∫£nh
    console.warn("Video kh√¥ng t·ªìn t·∫°i. Hi·ªÉn th·ªã ·∫£nh thay th·∫ø.");
    previewContainer.innerHTML = `<img id="large-image" src="${imageSrc}" alt="Preview" />`;
  }
}

