import os
import cv2
import numpy as np
from TransNetV2.inference.transnetv2 import TransNetV2

def extract_keyframes_from_video(video_path, output_root):
    video_name = os.path.splitext(os.path.basename(video_path))[0]
    print(f"\nüü¢ ƒêang x·ª≠ l√Ω: {video_name}")

    # Load model (n√™n load 1 l·∫ßn b√™n ngo√†i n·∫øu x·ª≠ l√Ω nhi·ªÅu video)
    model = TransNetV2()
    _, single_frame_predictions, _ = model.predict_video(video_path)

    # D·ª± ƒëo√°n danh s√°ch scene
    scenes = model.predictions_to_scenes(single_frame_predictions)
    print(f"üîπ S·ªë c·∫£nh ph√°t hi·ªán: {len(scenes)}")

    # T√≠nh index c·ªßa keyframe (·ªü gi·ªØa m·ªói c·∫£nh)
    key_frms_idx = (scenes[:, 0] + scenes[:, 1]) // 2
    print(f"üîπ Keyframe indices: {key_frms_idx}")

    # M·ªü video
    cap = cv2.VideoCapture(video_path)
    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

    # T·∫°o folder output ri√™ng cho video
    output_dir = os.path.join(output_root, video_name)
    os.makedirs(output_dir, exist_ok=True)

    count_saved = 0
    for i, frm_idx in enumerate(key_frms_idx):
        if frm_idx >= total_frames:
            print(f"‚ö†Ô∏è B·ªè qua frame {frm_idx} (v∆∞·ª£t qu√° s·ªë frame)")
            continue

        cap.set(cv2.CAP_PROP_POS_FRAMES, frm_idx)
        ret, frame = cap.read()
        if not ret:
            print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc frame t·∫°i {frm_idx}")
            continue

        out_path = os.path.join(output_dir, f"scene_{i:03d}.jpg")
        cv2.imwrite(out_path, frame)
        print(f"‚úÖ ƒê√£ l∆∞u: {out_path}")
        count_saved += 1

    cap.release()
    print(f"üü° T·ªïng s·ªë keyframe ƒë√£ l∆∞u: {count_saved}")

def process_all_videos_in_folder(input_folder, output_root="output_videos"):
    os.makedirs(output_root, exist_ok=True)

    video_files = [f for f in os.listdir(input_folder) if f.lower().endswith(('.mp4', '.avi', '.mov', '.mkv'))]
    print(f"üìÅ ƒê√£ t√¨m th·∫•y {len(video_files)} video trong '{input_folder}'")

    for video_file in video_files:
        video_path = os.path.join(input_folder, video_file)
        extract_keyframes_from_video(video_path, output_root)

if __name__ == "__main__":
    input_folder = "videos"  # th∆∞ m·ª•c ch·ª©a c√°c video g·ªëc
    output_root = "output_videos"  # n∆°i ch·ª©a c√°c th∆∞ m·ª•c theo video
    process_all_videos_in_folder(input_folder, output_root)
